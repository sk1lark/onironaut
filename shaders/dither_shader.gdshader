shader_type canvas_item;

// bayer dithering for 1-bit aesthetic like the lesser evil
uniform sampler2D screen_texture : hint_screen_texture;
uniform float dither_strength : hint_range(0.0, 1.0) = 1.0;
uniform float contrast : hint_range(0.5, 2.0) = 1.2;

// 8x8 bayer matrix for dithering
const float bayer[64] = float[](
	0.0/64.0,  32.0/64.0,  8.0/64.0,  40.0/64.0,  2.0/64.0,  34.0/64.0,  10.0/64.0, 42.0/64.0,
	48.0/64.0, 16.0/64.0, 56.0/64.0, 24.0/64.0, 50.0/64.0, 18.0/64.0, 58.0/64.0, 26.0/64.0,
	12.0/64.0, 44.0/64.0,  4.0/64.0, 36.0/64.0, 14.0/64.0, 46.0/64.0,  6.0/64.0, 38.0/64.0,
	60.0/64.0, 28.0/64.0, 52.0/64.0, 20.0/64.0, 62.0/64.0, 30.0/64.0, 54.0/64.0, 22.0/64.0,
	3.0/64.0,  35.0/64.0, 11.0/64.0, 43.0/64.0,  1.0/64.0, 33.0/64.0,  9.0/64.0, 41.0/64.0,
	51.0/64.0, 19.0/64.0, 59.0/64.0, 27.0/64.0, 49.0/64.0, 17.0/64.0, 57.0/64.0, 25.0/64.0,
	15.0/64.0, 47.0/64.0,  7.0/64.0, 39.0/64.0, 13.0/64.0, 45.0/64.0,  5.0/64.0, 37.0/64.0,
	63.0/64.0, 31.0/64.0, 55.0/64.0, 23.0/64.0, 61.0/64.0, 29.0/64.0, 53.0/64.0, 21.0/64.0
);

void fragment() {
	vec4 color = texture(screen_texture, SCREEN_UV);
	
	// convert to grayscale
	float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));
	
	// apply contrast
	gray = (gray - 0.5) * contrast + 0.5;
	gray = clamp(gray, 0.0, 1.0);
	
	// get bayer matrix value for this pixel
	vec2 screen_size = vec2(textureSize(screen_texture, 0));
	vec2 pixel_pos = SCREEN_UV * screen_size;
	int x = int(mod(pixel_pos.x, 8.0));
	int y = int(mod(pixel_pos.y, 8.0));
	float bayer_value = bayer[x + y * 8];
	
	// apply dithering
	float dithered = gray + (bayer_value - 0.5) * dither_strength;
	
	// threshold to pure black or white
	float final = step(0.5, dithered);
	
	COLOR = vec4(vec3(final), color.a);
}
